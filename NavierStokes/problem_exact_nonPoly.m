clear; close all;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Square geometry with known exact solution (no slip boundary conditions)
%    u   = 2*exp(x)*(x-1)^2*x^2*(y^2-y)*(2*y-1);
%    v   = -exp(x)*(x-1)*x*(-2+x*(x+3))*(y-1)^2*y^2;
%    p   = (-424+156*exp(1)+(y^2-y)*(-456+exp(x)*(456+x^2*(228-5*(y^2-y))+2*x*(-228+(y^2-y))+2*x^3*(-36+(y^2-y))+x^4*(12+(y^2-y)))));
%
%   +--------+
%   |        |
%   | Omega  |
%   |        |
%   +--------+
%                                                       
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

p  = 2; % polynomial degree. May be needed in Problem.Time_Step
Re = 1; % Reynolds number.   May be needed in Problem.Time_Step

Problem = struct(...
'Title'             ,  'PaperExact',  ...
'Subtitle'          ,  'non-poly',    ...
'Identifier'        ,  'a',        ...
'Geometry'          ,  'Square',   ...
'Geometry_param'    ,  5,          ...
'Polynomial_Degree' ,  [p,p],      ...
'H_Max'             ,  1/8,        ...
'H_Min'             ,  1/8,        ...
'Reynolds'          ,  Re,         ...
'Geom_TOL'          ,  1e-10,      ...
'Newton_TOL'        ,  1e-10,      ...
'Newton_Max_It'     ,  12,         ...
'Force'             ,  @(x,y) [    ...
    (- y^2 + y)*(exp(x)*(2*y - 2*x*(- 5*y^2 + 5*y + 228) - 4*x^3*(y^2 - y + 12) + 6*x^2*(- y^2 + y + 36) - 2*y^2 + 456) - exp(x)*(x^4*(y^2 - y + 12) - 2*x^3*(- y^2 + y + 36) + x^2*(- 5*y^2 + 5*y + 228) - 2*x*(- y^2 + y + 228) + 456)) + 4*x^2*exp(x)*(- y^2 + y)*(2*y - 1) - 4*x^2*exp(x)*(2*y - 1)*(x - 1)^2 - 2*x^2*exp(x)*(8*y - 4)*(x - 1)^2 + 4*exp(x)*(- y^2 + y)*(2*y - 1)*(x - 1)^2 + 8*x*exp(x)*(- y^2 + y)*(2*x - 2)*(2*y - 1) + 8*x*exp(x)*(- y^2 + y)*(2*y - 1)*(x - 1)^2 + 4*x^2*exp(x)*(- y^2 + y)*(2*x - 2)*(2*y - 1) + 2*x^2*exp(x)*(- y^2 + y)*(2*y - 1)*(x - 1)^2; ...
    (exp(x)*(x^4*(y^2 - y + 12) - 2*x^3*(- y^2 + y + 36) + x^2*(- 5*y^2 + 5*y + 228) - 2*x*(- y^2 + y + 228) + 456) - 456)*(2*y - 1) - exp(x)*(- y^2 + y)*(2*x*(2*y - 1) + 2*x^3*(2*y - 1) + x^4*(2*y - 1) - x^2*(10*y - 5)) + 2*y^2*exp(x)*(x*(x + 3) - 2)*(y - 1)^2 + 2*y^2*exp(x)*(x*(x + 3) - 2)*(x - 1)*(y - 1)^2 + 2*y^2*exp(x)*(2*x + 3)*(x - 1)*(y - 1)^2 + 2*x*y^2*exp(x)*(x*(x + 3) - 2)*(x - 1) + 2*x*y^2*exp(x)*(x - 1)*(y - 1)^2 + 2*x*exp(x)*(x*(x + 3) - 2)*(x - 1)*(y - 1)^2 + 2*x*y^2*exp(x)*(x*(x + 3) - 2)*(y - 1)^2 + 2*x*y^2*exp(x)*(2*x + 3)*(y - 1)^2 + 4*x*y*exp(x)*(x*(x + 3) - 2)*(2*y - 2)*(x - 1) + x*y^2*exp(x)*(x*(x + 3) - 2)*(x - 1)*(y - 1)^2 + 2*x*y^2*exp(x)*(2*x + 3)*(x - 1)*(y - 1)^2], ...
'Static'            ,  true,       ...
'Linear'            ,  true,       ...
'Paraview'          ,  false,      ...
'MatlabPlot'        ,  true,       ...
'Save_Results'      ,  false,       ...
'Time_Step'         ,  .10,        ...
'Time_Range'        ,  [0,10]);
% 'Time_Step'         ,  @(h) min(h^((p+1)/2), h^2 /4*Re), ...

Exact_solution = struct(                  ...
'u',      @(x,y) 2*exp(x)*(x-1)^2*x^2*(y^2-y)*(2*y-1), ...
'v',      @(x,y) -exp(x)*(x-1)*x*(-2+x*(x+3))*(y-1)^2*y^2, ...
'p',      @(x,y) (-424+156*exp(1)+(y^2-y)*(-456+exp(x)*(456+x^2*(228-5*(y^2-y))+2*x*(-228+(y^2-y))+2*x^3*(-36+(y^2-y))+x^4*(12+(y^2-y))))), ...
'grad_u', @(x,y) [- 4*x*exp(x)*(- y^2 + y)*(2*y - 1)*(x - 1)^2 - 2*x^2*exp(x)*(- y^2 + y)*(2*x - 2)*(2*y - 1) - 2*x^2*exp(x)*(- y^2 + y)*(2*y - 1)*(x - 1)^2; 2*x^2*exp(x)*(2*y - 1)^2*(x - 1)^2 - 4*x^2*exp(x)*(- y^2 + y)*(x - 1)^2], ...
'grad_v', @(x,y) [- y^2*exp(x)*(x*(x + 3) - 2)*(x - 1)*(y - 1)^2 - x*y^2*exp(x)*(x*(x + 3) - 2)*(y - 1)^2 - x*y^2*exp(x)*(x*(x + 3) - 2)*(x - 1)*(y - 1)^2 - x*y^2*exp(x)*(2*x + 3)*(x - 1)*(y - 1)^2; - 2*x*y*exp(x)*(x*(x + 3) - 2)*(x - 1)*(y - 1)^2 - x*y^2*exp(x)*(x*(x + 3) - 2)*(2*y - 2)*(x - 1)] ...
);

BC     = cell(0);
BC = [BC, struct('pressure_integral', true)];
BC = [BC, struct('start', [0,0], 'stop', [1,0], 'comp', 2, 'value', 0, 'weak', false)];
BC = [BC, struct('start', [0,1], 'stop', [1,1], 'comp', 2, 'value', 0, 'weak', false)];
BC = [BC, struct('start', [0,0], 'stop', [0,1], 'comp', 1, 'value', 0, 'weak', false)];
BC = [BC, struct('start', [1,0], 'stop', [1,1], 'comp', 1, 'value', 0, 'weak', false)];
BC = [BC, struct('start', [0,0], 'stop', [1,0], 'comp', 1, 'value', 0, 'weak', false)];
BC = [BC, struct('start', [0,1], 'stop', [1,1], 'comp', 1, 'value', 0, 'weak', false)];
BC = [BC, struct('start', [0,0], 'stop', [0,1], 'comp', 2, 'value', 0, 'weak', false)];
BC = [BC, struct('start', [1,0], 'stop', [1,1], 'comp', 2, 'value', 0, 'weak', false)];
BC = [BC, struct('start', [0,0], 'stop', [0,0], 'comp', 3, 'value', Exact_solution.p(0,0), 'weak', false)];
BC = [BC, struct('start', [1,0], 'stop', [1,0], 'comp', 3, 'value', Exact_solution.p(1,0), 'weak', false)];
BC = [BC, struct('start', [0,1], 'stop', [0,1], 'comp', 3, 'value', Exact_solution.p(0,1), 'weak', false)];
BC = [BC, struct('start', [1,1], 'stop', [1,1], 'comp', 3, 'value', Exact_solution.p(1,1), 'weak', false)];



main_init;
main_assemble;

if Problem.Static
  main_static;
  integrateNorms;
else 
  main_time_loop;
end

main_dump_results;
