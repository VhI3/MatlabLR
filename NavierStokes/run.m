clear; close all;

p  = 2;   % polynomial degree. May be needed in Problem.Time_Step
Re = 100; % Reynolds number.   May be needed in Problem.Time_Step

Problem = struct(...
'Title'             ,  'Channel',  ...
'Subtitle'          ,  'stokes',   ...
'Identifier'        ,  'a',        ...
'Geometry'          ,  'Channel',  ...
'Geometry_param'    ,  5,          ...
'Polynomial_Degree' ,  [p,p],      ...
'H_Max'             ,  1/4,        ...
'H_Min'             ,  1/4,        ...
'Reynolds'          ,  Re,         ...
'Newton_TOL'        ,  1e-10,      ...
'Newton_Max_It'     ,  12,         ...
'Time_Step'         ,  .10,        ...
'Time_Range'        ,  [0,10]);
% 'Time_Step'         ,  @(h) min(h^((p+1)/2), h^2 /4*Re), ...

BC    = cell(1);
BC{1} = struct('start', [0,0],                      'stop', [Problem.Geometry_param,0], 'value', 0);
BC{2} = struct('start', [0,1],                      'stop', [Problem.Geometry_param,1], 'value', 0);
BC{3} = struct('start', [0,0],                      'stop', [0,1],                      'value', @(x,y) y*(1-y));
BC{4} = struct('start', [Problem.Geometry_param,0], 'stop', [Problem.Geometry_param,1], 'value', @(x,y) y*(1-y));


main_init;
% lr.surf(zeros(size(lr.elements,1),1));
% lrv.plot('parametric', 'basis', 'enumerate');
% axis equal;
% [u, iu] = L2edge(lru, [0,-1], [0,0], 1, newElU);
% [v, iv] = L2edge(lrv, [-4,0], [0,0], 1, newElV);
% [u, iu] = L2edge(lru, [-4,-1], [-4,2], @(x,y) y*(2-y), newElU);
% cc = zeros(size(lru.knots,1),1);
% cc(iu) = u;
% lru.surf(cc, 'parametric'); axis equal;
% break;
main_assemble;
main_time_loop;
main_dump_results;

